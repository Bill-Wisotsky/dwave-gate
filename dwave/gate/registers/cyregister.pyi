# Confidential & Proprietary Information: D-Wave Systems Inc.

# The following code is a derivative work of the code from the dwavesystems/dimod package,
# specifically dimod/dimod/cyvariables.pyi, which is licensed under the Apache License 2.0.

# as of Cython 0.29.28, __annotations__ are not included for Cython objects.
# so we specify their types here.

from typing import Hashable, Iterable, Iterator, Mapping, Optional, TypeVar, overload

T = TypeVar("T")

class cyRegister:
    def __init__(self, iterable: Optional[Iterable[Hashable]] = None): ...
    def __contains__(self, v: Hashable) -> bool: ...
    def __copy__(self: T) -> T: ...
    @overload
    def __getitem__(self, idx: int) -> Hashable: ...
    @overload
    def __getitem__(self: T, idx: slice) -> T: ...
    def __iter__(self) -> Iterator[Hashable]: ...
    def __len__(self) -> int: ...
    def _append(self, v: Optional[Hashable] = None, permissive: bool = False) -> Hashable: ...
    def _clear(self) -> None: ...
    def _is_range(self) -> bool: ...
    def _extend(self, iterable: Iterable[Hashable], permissive: bool = False) -> None: ...
    def _pop(self) -> Hashable: ...
    def _relabel(self, mapping: Mapping[Hashable, Hashable]) -> None: ...
    def _relabel_as_integers(self) -> Mapping[int, Hashable]: ...
    def _remove(self, v: Hashable) -> None: ...
    def copy(self: T) -> T: ...
    def count(self, v: Hashable) -> int: ...
    def index(self, v: Hashable, permissive: bool = False) -> int: ...
